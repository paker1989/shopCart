There are three types of components in React Router: router components, route matching components, and navigation components.
you should use a <BrowserRouter> if you have a server that responds to requests and a <HashRouter> if you are using a static file server.

You can include a <Route> anywhere that you want to render content based on the location

switch: his helps when multiple route’s paths match the same pathname, when animating transitions between routes, and in identifying
when no routes match the current location (so that you can render a “404” component).

Route: 
  - component:  You should not use the component prop with an inline function to pass in-scope variables because you will get undesired 
  component unmounts/remounts.
  - Render: render, which takes an inline function, should only be used when you have to pass in-scope variables to the component 
    you want to render.

Navigation:
- Link,
- NavLink: 
- <redirect to="/login" />

====
ScrollRestoration
RestoredScroll

For a generic solution (and what browsers are starting to implement natively) we’re talking about two things:

Scrolling up on navigation so you don’t start a new screen scrolled to the bottom
Restoring scroll positions of the window and overflow elements on “back” and “forward” clicks (but not Link clicks!)

First, ScrollRestoration would scroll the window up on navigation. Second, it would use location.key to save the window scroll 
position and the scroll positions of RestoredScroll components to sessionStorage. Then, when ScrollRestoration or RestoredScroll components mount, they could look up their position from sessionsStorage.

====
router component props: { match, location, history}


===========
react router设计哲学: dynamic routing, composable design.

========
Route会给render的组件里注入props，包括 history, location, match
location中包括key, hash, search, pathname等信息，其中user can define <state>， 比较有用